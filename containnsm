#!/usr/bin/env bash
COWSAY=/usr/games/cowsay
LOGFILE=containnsm.log

# Globals
ARGC=$#
SUBCOMMAND="$1"
shift 1
ARGV="$@"
PARAMS="${ARGV%%--*}"
CMDLINE="${ARGV#*--}"

normal="$(tput sgr0)"
bold="$(tput bold)"
underline="$(tput smul)"
yellow="$(tput setaf 3)"
redf="$(tput setaf 1)"
magentaf="$(tput setaf 5)"
whitef="$(tput setaf 7)"

N="${normal}"
B="${bold}"
U="${underline}"
Y="${yellow}"
RF="${redf}"
RB="${redb}"
GF="${greenf}"
GB="${greenb}"
MF="${magentaf}"
WF="${whitef}"

usage(){
cat <<EOF

${MF}ContainNSM:${N} ${Y}Easily utilize the ContainNSM docker image collection${N}

      ${B}Subcommands:${N}
        ${Y}help${N}            Help (this message)
        ${Y}build${N}           Build an image from directory
        ${Y}run${N}             Create a container from image

      ${B}Subcommand options:${N}
        build ${U}<dir>${N}     Directory to Dockerfile
        help            Help
        run ${U}[options]${N}
          ${WF}-r${N} ${U}<file>${N}     Read in PCAP (Mounts in container)
          ${WF}-w${N} ${U}<dir|file>${N} Write out data to directory or file
          ${WF}-C${N} ${U}<dir>${N}      Set working directory in container
          ${WF}-I${N} ${U}<image>${N}    Docker image e.g. \`\`-I opennsm/bro:2.4.1''
          ${WF}--${N}            Arguments passed to container e.g. \`\`-- bash''

      ${B}Examples:${N}
            $0 build bro/2.4.1
            $0 run -r /pcaps/ctf.pcap -I opennsm/tcpdump:4.7.4 -- tcpdump -nnr ctf.pcap -c 10
            $0 run -w \$PWD -C \$PWD  -I opennsm/bro:2.4 -- bro -i eth0

${Y}Usage:${N} ${MF}$0${N} {${Y}-I${N} ${WF}<image>${N}} [${Y}-r${N} ${WF}<pcap>${N}] [${Y}-w${N} ${WF}<dir|file>${N}] -- [${WF}commands${N}]
EOF
exit 1
}

function die(){
  if [ -f ${COWSAY:-none} ]; then
    $COWSAY -d "$*"
  else
    echo "${RF}$*${N}"
  fi
  exit 1
}

function hi(){
  if [ -f ${COWSAY:-none} ]; then
    $COWSAY "$*"
  else
    echo "${WF}$*${N}"
  fi
  return 0
}

argcheck(){
  local num
  num="$1"
  [[ $ARGC -lt $num ]] && die "Missing arguments! Use \`\`$0 help'' for help."
}

options(){
  # Check for arguments
  argcheck 1

  [[ "$SUBCOMMAND" == "help" ]] && usage
  [[ "$SUBCOMMAND" == "build" ]] && build "$PARAMS"

  if [[ "$SUBCOMMAND" == "run" ]]; then
    while getopts "hC:r:i:I:w:" OPTION $PARAMS
    do
      case $OPTION in
        h) usage;;
        C) WORKDIR="$OPTARG";;
        i) NIC="$OPTARG";;
        r) PCAP="$OPTARG";;
        w) WRITE=1; OUT="$OPTARG";;
        I) IMAGE="$OPTARG";;
        \?) die "Invalid option: -$OPTARG" >&2;;
      esac
    done
    return 0
  fi
  die "Invalid option, please see help for subcommands: \`\`$0 help''"
}

is_docker(){
  which docker 1>/dev/null 2>/dev/null || die "Docker not found, check PATH"
}

is_pcap(){
  local pcap
  local is_pcap
  pcap="$1"

  # Read option not used
  [[ $pcap == "none" ]] && return 0

  # Test for valid PCAP
  [[ -f $pcap ]] || die "File $pcap not found or not file"
  is_pcap=$(file $pcap 2>/dev/null)
  [[ "$is_pcap" =~ "tcpdump capture file" ]] || die "Not a valid PCAP file"
  return 0
}

is_nic(){
  local nic
  local is_nic
  nic="$1"
  [[ -f $nic ]] || die "Interface $nic not found or not file"
  is_nic=$(docker run "$image" ls /sys/class/net/)
  [[ "$is_nic" =~ "$NIC" ]] || die "Interface $NIC doesn't exist"
  return 0
}

test_paths(){
  printf "${Y}Mount:${N}\t${WF}Host: ${N}%s ${MF}->${N} ${WF}Container: ${N}%s\n" "$OUT" "$OUT"  >&2
  printf "${Y}Cwd:${N}\t%s\n" "$WORKDIR" >&2
  printf "${Y}PCAP:${N}\t%s\n" "$PCAP" >&2

  [[ "$OUT"     = /* ]]     || die "Error: $OUT is not an absolute path!"
  [[ "$WORKDIR" = /* ]]     || die "Error: $workdir is not an absolute path!"
  [[ "$PCAP"    = "none" ]] && return 0
  [[ "$PCAP"    = /* ]]     || die "Error: $pcap is not an absolute path!"
  return 0
}

config(){
  local cwd
  home=/home/opennsm
  OUT="${OUT:-$PWD}"
  PCAP="${PCAP:-none}"
  [[ "$PCAP" = "none" ]] || PCAP_DIR=$(dirname "$PCAP")
  WORKDIR="${WORKDIR:-$PCAP_DIR}"
  [[ $WORKDIR ]] || WORKDIR="$PWD"
  ! [[ "$WRITE" -eq 1 ]] && [[ "$PCAP" = "none" ]] && WORKDIR="$home"
}

build(){
  local file
  local image
  local tag
  dir=$1
  [[ -d $dir ]] || die "$dir is not a directory or doesn't exist"
  [[ $dir = */*/* ]] && dir=${dir%/*}
  image="${dir%/*}"
  tag="${dir#*/}"
  name="${image}:${tag}"
  docker build -t opennsm/$name - < $dir/Dockerfile
  [[ $? -ne 0 ]] && die "Build failed, check your Dockerfile"
  hi "Image created - try \`\`${MF}./containnsm run -I opennsm/$name -- bash${N}'' to test it out"
  exit 0
}

run(){
  local pcap
  local cmdline
  pcap="$1"
  cmdline="$2"
  [[ $pcap = "none" ]] && eval docker run -it -v "${OUT}:${OUT}:rw" -w "$WORKDIR" "$IMAGE" "$cmdline"
  [[ $pcap != "none" ]] && eval docker run -it -v "${pcap}:${pcap}:ro" -v "${OUT}:${OUT}:rw" -w "$WORKDIR" "$IMAGE" "$cmdline"
}

main(){
  options
  config
  # Check for absolute paths
  test_paths
  # Check for Docker
  is_docker
  # Check input file
  is_pcap "${PCAP}" && run "${PCAP}" "$CMDLINE"
}

main
