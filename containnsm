#!/usr/bin/env bash
#set -x
MAIL=$(which mail)
COWSAY=/usr/games/cowsay
IRCSAY=/usr/local/bin/ircsay
IRC_CHAN="#replace_me"
HOST=$(hostname -s)
LOGFILE=containnsm.log
EMAIL=user@company.com

# Globals
ARGC=$#
ARGV="$@"
PARAMS="${ARGV%%--*}"
CMDLINE="${ARGV#*--}"

normal="$(tput sgr0)"
bold="$(tput bold)"
underline="$(tput smul)"
yellow="$(tput setaf 3)"
redf="$(tput setaf 1)"
magentaf="$(tput setaf 5)"
whitef="$(tput setaf 7)"

N="${normal}"
B="${bold}"
U="${underline}"
Y="${yellow}"
RF="${redf}"
RB="${redb}"
GF="${greenf}"
GB="${greenb}"
MF="${magentaf}"
WF="${whitef}"


usage(){
cat <<EOF

${MF}ContainNSM:${N} ${Y}Easily utilize the ContainNSM docker image collection${N}

      ${B}Options:${N}
	${Y}-h${N}            help (this message)
        ${Y}-r${N} ${U}<file>${N}     Read in PCAP
        ${Y}-w${N} ${U}<dir|file>${N} Write out data to directory or file
        ${Y}-C${N} ${U}<workdir>${N}  Set working directory in container
        ${Y}-I${N} ${U}<image>${N}    Docker image e.g. \`\`-I opennsm/bro:2.4.1''
        ${Y}--${N}            Arguments passed to container e.g. \`\`-- pwd''

${Y}Usage:${N} ${MF}$0${N} ${Y}-I${N} {${WF}image${N}} [${Y}-r${N} ${WF}<pcap>${N}] [${Y}-w${N} ${WF}<dir|file>${N}] -- [${WF}commands${N}]
e.g. $0 -r /pcaps/ctf.pcap -I opennsm/tcpdump:4.7.4 -- tcpdump -nnr input -c 10
e.g. $0 -w $PWD -C $PWD  -I opennsm/bro:2.4 -- bro -i eth0

EOF
exit 1
}

function die(){
  if [ -f ${COWSAY:-none} ]; then
    $COWSAY -d "$*"
  else
    echo "${RF}$*${N}"
  fi
  #if [ -f $IRCSAY ]; then
  #  ( set +e; $IRCSAY "$IRC_CHAN" "$*" 2>/dev/null || true )
  #fi
  #[ $MAIL ] && echo "$*" | mail -s "[ContainNSM] error on $HOST" $EMAIL
  exit 1
}

function hi(){
  if [ -f ${COWSAY:-none} ]; then
    $COWSAY "$*"
  else
    echo "$*"
  fi
  #if [ -f $IRCSAY ]; then
  #  ( set +e; $IRCSAY "$IRC_CHAN" "$*" 2>/dev/null || true )
  #fi
  #[ $MAIL ] && echo "$*" | mail -s "[vagrant] PXE install information on $HOST" $EMAIL
  return 0
}

argcheck(){
  local num
  num="$1"
  [[ $ARGC -lt $num ]] && die "Missing arguments! Use \`\`-h'' for help."
}

options(){
  # Check for arguments
  argcheck 1

  while getopts "hC:r:i:I:w:" OPTION $PARAMS
  do
    case $OPTION in
      h) usage;;
      C) WORKDIR="$OPTARG";;
      i) NIC="$OPTARG";;
      r) PCAP="$OPTARG";;
      w) OUT="$OPTARG";;
      I) IMAGE="$OPTARG";;
      \?) die "Invalid option: -$OPTARG" >&2;;
    esac
  done
}

is_docker(){
  which docker 1>/dev/null 2>/dev/null || die "Docker not found, check PATH"
}

is_pcap(){
  local pcap
  local is_pcap
  pcap="$1"

  # Read option not used
  [[ $pcap == "none" ]] && return 0

  # Test for valid PCAP
  [[ -f $pcap ]] || die "File $pcap not found or not file"
  is_pcap=$(file $pcap 2>/dev/null)
  [[ "$is_pcap" =~ "tcpdump capture file" ]] || die "Not a valid PCAP file"
  return 0
}

is_nic(){
  local nic
  local is_nic
  nic="$1"
  [[ -f $nic ]] || die "Interface $nic not found or not file"
  is_nic=$(docker run "$image" ls /sys/class/net/)
  [[ "$is_nic" =~ "$NIC" ]] || die "Interface $NIC doesn't exist"
  return 0
}

test_paths(){
  printf "${Y}Mount:${N}\t%s\n" "$OUT"  >&2
  printf "${Y}Cwd:${N}\t%s\n" "$WORKDIR" >&2
  printf "${Y}PCAP:${N}\t%s\n" "$PCAP" >&2

  [[ "$OUT"     = /* ]]     || die "Error: $OUT is not an absolute path!"
  [[ "$WORKDIR" = /* ]]     || die "Error: $workdir is not an absolute path!"
  [[ "$PCAP"    = "none" ]] && return 0
  [[ "$PCAP"    = /* ]]     || die "Error: $pcap is not an absolute path!"
  return 0
}

config(){
  OUT=${OUT:-$PWD}
  PCAP=${PCAP:-none}
  [[ "$PCAP" = "none" ]] || PCAP_DIR=$(dirname "$PCAP")
  WORKDIR=${WORKDIR:-$PCAP_DIR}
  [[ $WORKDIR ]] || WORKDIR="$PWD"
}

run(){
  local pcap
  local cmdline
  cwd=/home/opennsm
  pcap="$1"
  cmdline="$2"
  [[ $pcap = "none" ]] && eval docker run -it -v "${OUT}:${OUT}:rw" -w "$WORKDIR" "$IMAGE" "$cmdline"
  [[ $pcap != "none" ]] && eval docker run -it -v "${pcap}:${pcap}:ro" -v "${OUT}:${OUT}:rw" -w "$WORKDIR" "$IMAGE" "$cmdline"
  [[ $? -ne 0 ]] && die "Container creation failed, check your options"
}

main(){
  options
  config
  # Check for absolute paths
  test_paths
  # Check for Docker
  is_docker
  # Check input file
  is_pcap "${PCAP}" && run "${PCAP}" "$CMDLINE"
}

main
